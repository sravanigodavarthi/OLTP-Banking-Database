import psycopg2
from contextlib import contextmanager

# Context manager for database connection
@contextmanager
def db_connection(**config):
    conn = None
    try:
        conn = psycopg2.connect(**config)
        yield conn 
    except psycopg2.Error as e:
        print(f"Connection failed: {e}")
    finally:
        if conn:
            conn.close()  

def create_database(conn):
    try:
        cur = conn.cursor()
        conn.set_session(autocommit=True)
        # Check if the database already exists
        cur.execute("SELECT 1 FROM pg_database WHERE datname = 'bank'")
        result = cur.fetchone()
        if not result:
            # Create the database if it does not exist
            cur.execute("CREATE DATABASE Bank")
            print("Database created successfully!")
        else:
            print(f"database already exists")
    except psycopg2.Error as e:
        print(f"{e}")
    
def create_schemas_and_tables(conn):
    
    try:
        cur = conn.cursor()
        conn.set_session(autocommit = True)
        # Create schemas
        cur.execute("CREATE SCHEMA IF NOT EXISTS human_resource")
        cur.execute("CREATE SCHEMA IF NOT EXISTS finance")
        print("schema created successfully!")
        
        # Create department table
        cur.execute('''CREATE TABLE IF NOT EXISTS human_resource.department(
                        department_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY, 
                        department_name VARCHAR(50) NOT NULL,
                        CONSTRAINT department_pkey PRIMARY KEY (department_id));''')

        # Create employee table
        cur.execute('''CREATE TABLE IF NOT EXISTS human_resource.employee(
                        employee_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
                        first_name VARCHAR(50) NOT NULL,
                        last_name VARCHAR(50) NOT NULL,
                        hire_date DATE NOT NULL,
                        department_id integer NOT NULL,
                        CONSTRAINT employee_pkey PRIMARY KEY (employee_id),
                        CONSTRAINT department_fkey FOREIGN KEY (department_id)
                            REFERENCES human_resource.department (department_id) MATCH SIMPLE
                            ON UPDATE CASCADE);''')

        # Create customer table
        cur.execute('''CREATE TABLE IF NOT EXISTS finance.customer(
                        customer_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
                        customer_type varchar(20) NOT NULL,
                        CONSTRAINT user_pkey PRIMARY KEY (customer_id),
                        CONSTRAINT chk_valid_customer_type CHECK (customer_type = ANY (ARRAY['retail', 'corporate']::VARCHAR[])));''')

        # Create account table
        cur.execute('''CREATE TABLE IF NOT EXISTS finance.account(
                        account_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
                        account_holder VARCHAR(100) NOT NULL,
                        current_balance NUMERIC(10,2) NOT NULL,
                        customer_id INT NOT NULL,
                        CONSTRAINT account_pkey PRIMARY KEY (account_id),
                        CONSTRAINT user_fkey FOREIGN KEY (customer_id)
                            REFERENCES finance.customer (customer_id) MATCH SIMPLE
                            ON UPDATE CASCADE,
                        CONSTRAINT chk_positive_balance CHECK (current_balance >=0::numeric));''')

        # Create transaction table
        cur.execute('''CREATE TABLE IF NOT EXISTS finance.transaction(
                        transaction_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY,
                        transaction_type VARCHAR(20) NOT NULL,
                        amount NUMERIC(10,2) NOT NULL,
                        transaction_date timestamp NOT NULL,
                        account_id INT NOT NULL,
                        employee_id INT,
                        CONSTRAINT transaction_pkey PRIMARY KEY (transaction_id),
                        CONSTRAINT account_fkey FOREIGN KEY (account_id)
                            REFERENCES finance.account (account_id) MATCH SIMPLE
                            ON UPDATE CASCADE,
                        CONSTRAINT employee_fkey FOREIGN KEY (employee_id)
                            REFERENCES human_resource.employee (employee_id) MATCH SIMPLE
                            ON UPDATE CASCADE,
                        CONSTRAINT chk_non_negative_amount CHECK (amount > 0::numeric));''')
        
        # Alter employee table to add salary column and constraint
        cur.execute('''ALTER TABLE human_resource.employee
                        ADD COLUMN IF NOT EXISTS salary NUMERIC(10,2),
                        ADD CONSTRAINT chk_salary_positive CHECK (salary > 0::numeric);''')
    except psycopg2.Error as e:
        print(f"{e}")
        
def insert_data(conn):
    try:
        cur = conn.cursor()

        # Insert data into department table
        department_sql = '''INSERT INTO human_resource.department
                    (department_name)
                    VALUES (%s)'''
        department_values = [
            ('Human Resources (HR)',),
            ('Retail Banking',),
            ('Information Technology (IT)',),
            ('Training',)
        ]
        cur.executemany(department_sql, department_values)
        print("records inserted to department table successfully")
        
        # Insert data into employee table
        employee_sql = '''INSERT INTO human_resource.employee
                (first_name, last_name, hire_date, department_id, salary) 
                VALUES (%s, %s, %s, %s, %s) '''
        employee_values = [
            ('John', 'Doe', '2020-01-15', 1, 60000.00),
            ('Jane', 'Smith', '2019-05-20', 1, 75000.00),
            ('Michael', 'Johnson', '2021-03-10', 2, 90000.00),
            ('Emily', 'Williams', '2018-09-30', 3, 80000.00),
            ('William', 'Brown', '2017-11-05', 4, 50000.00)
        ]
        cur.executemany(employee_sql, employee_values)
        print("records inserted to employee table successfully")
        
        # Insert data into account table
        account_sql = '''INSERT INTO finance.account
                (account_holder, current_balance, customer_id)
                VALUES (%s, %s, %s)'''
        account_values = [
            ('John Doe', 10000.00, 1),
            ('Emily Williams', 40000.00, 2),
            ('William Brown', 50000.00, 1)
        ]
        cur.executemany(account_sql, account_values)
        print("records inserted to account table successfully")
        
        # Insert data into customer table
        customer_sql = '''INSERT INTO finance.customer
                (customer_type)
                VALUES (%s)'''
        customer_values = [('retail',), ('corporate',), ('retail',)]
        cur.executemany(customer_sql, customer_values)
        print("records inserted to customer table successfully")
        
    except psycopg2.Error as e:
        print(f"{e}")

if __name__ == "__main__":
    # Database connection parameters
    db_params = {
        "host": "localhost",
        "user": "postgres",
        "dbname": "postgres",
        "password": "postgres",
        "port": 5432
    }
    
    # Create the database
    with db_connection(**db_params) as pg_conn:
        create_database(pg_conn)
        
    # Update the database name to connect to the newly created database
    db_params["dbname"] = "bank"
    
    # Create schemas, tables, and insert initial data
    with db_connection(**db_params) as pg_conn:
        create_schemas_and_tables(pg_conn)
        insert_data(pg_conn)    